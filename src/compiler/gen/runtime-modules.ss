#lang s-exp "../lang.ss"
;; This file is automagically generated and maintained by bootstrap-js-compiler.
;; (in write-runtime-toplevel-bindings-descriptions)
;; Do not edit this file by hand.
(define MOBY-RUNTIME-MODULE-BINDINGS
  (list
   '(moby/runtime/stx
     "runtime/stx.ss"
     ((binding:function stx-e #f 1 #f "stx_dash_e" () #f)
      (binding:structure
       stx:list
       (elts loc)
       make-stx:list
       stx:list?
       (stx:list-elts stx:list-loc)
       (set-stx:list-elts! set-stx:list-loc!))
      (binding:function stx? #f 1 #f "stx_question_" () #f)
      (binding:structure
       stx:atom
       (datum loc)
       make-stx:atom
       stx:atom?
       (stx:atom-datum stx:atom-loc)
       (set-stx:atom-datum! set-stx:atom-loc!))
      (binding:function stx-loc #f 1 #f "stx_dash_loc" () #f)
      (binding:function datum->stx #f 2 #f "datum_dash__greaterthan_stx" () #f)
      (binding:function stx-begins-with? #f 2 #f "stx_dash_begins_dash_with_question_" () #f)
      (binding:function stx->datum #f 1 #f "stx_dash__greaterthan_datum" () #f)
      (binding:structure
       Loc
       (offset line column span id)
       make-Loc
       Loc?
       (Loc-offset Loc-line Loc-column Loc-span Loc-id)
       (set-Loc-offset! set-Loc-line! set-Loc-column! set-Loc-span! set-Loc-id!))))
   '(moby/runtime/binding
     "runtime/binding.ss"
     ((binding:function binding? #f 1 #f "binding_question_" () #f)
      (binding:function module-name? #f 1 #f "module_dash_name_question_" () #f)
      (binding:function module-path? #f 1 #f "module_dash_path_question_" () #f)
      (binding:function sexp->binding #f 1 #f "sexp_dash__greaterthan_binding" () #f)
      (binding:function module-path=? #f 2 #f "module_dash_path_equal__question_" () #f)
      (binding:structure
       module-binding
       (name source bindings)
       make-module-binding
       module-binding?
       (module-binding-name module-binding-source module-binding-bindings)
       (set-module-binding-name! set-module-binding-source! set-module-binding-bindings!))
      (binding:structure
       binding:function
       (name module-source min-arity var-arity? java-string permissions cps?)
       make-binding:function
       binding:function?
       (binding:function-name
        binding:function-module-source
        binding:function-min-arity
        binding:function-var-arity?
        binding:function-java-string
        binding:function-permissions
        binding:function-cps?)
       (set-binding:function-name!
        set-binding:function-module-source!
        set-binding:function-min-arity!
        set-binding:function-var-arity?!
        set-binding:function-java-string!
        set-binding:function-permissions!
        set-binding:function-cps?!))
      (binding:structure
       binding:structure
       (name fields constructor predicate accessors mutators)
       make-binding:structure
       binding:structure?
       (binding:structure-name
        binding:structure-fields
        binding:structure-constructor
        binding:structure-predicate
        binding:structure-accessors
        binding:structure-mutators)
       (set-binding:structure-name!
        set-binding:structure-fields!
        set-binding:structure-constructor!
        set-binding:structure-predicate!
        set-binding:structure-accessors!
        set-binding:structure-mutators!))
      (binding:function binding-id #f 1 #f "binding_dash_id" () #f)
      (binding:structure
       binding:constant
       (name java-string permissions)
       make-binding:constant
       binding:constant?
       (binding:constant-name binding:constant-java-string binding:constant-permissions)
       (set-binding:constant-name!
        set-binding:constant-java-string!
        set-binding:constant-permissions!))
      (binding:function binding->sexp #f 1 #f "binding_dash__greaterthan_sexp" () #f)))
   '(moby/runtime/permission-struct
     "runtime/permission-struct.ss"
     ((binding:structure
       permission:open-image-url
       (url)
       make-permission:open-image-url
       permission:open-image-url?
       (permission:open-image-url-url)
       (set-permission:open-image-url-url!))
      (binding:structure permission:tilt () make-permission:tilt permission:tilt? () ())
      (binding:structure
       permission:wake-lock
       ()
       make-permission:wake-lock
       permission:wake-lock?
       ()
       ())
      (binding:function permission? #f 1 #f "permission_question_" () #f)
      (binding:function string->permission #f 1 #f "string_dash__greaterthan_permission" () #f)
      (binding:structure
       permission:universe
       (url)
       make-permission:universe
       permission:universe?
       (permission:universe-url)
       (set-permission:universe-url!))
      (binding:structure permission:send-sms () make-permission:send-sms permission:send-sms? () ())
      (binding:structure permission:shake () make-permission:shake permission:shake? () ())
      (binding:structure
       permission:telephony
       ()
       make-permission:telephony
       permission:telephony?
       ()
       ())
      (binding:structure
       permission:receive-sms
       ()
       make-permission:receive-sms
       permission:receive-sms?
       ()
       ())
      (binding:constant PERMISSION:SHAKE "PERMISSION_colon_SHAKE" ())
      (binding:structure permission:internet () make-permission:internet permission:internet? () ())
      (binding:structure permission:location () make-permission:location permission:location? () ())
      (binding:constant PERMISSION:WAKE-LOCK "PERMISSION_colon_WAKE_dash_LOCK" ())
      (binding:function permission->string #f 1 #f "permission_dash__greaterthan_string" () #f)
      (binding:function
       permission->android-permissions
       #f
       1
       #f
       "permission_dash__greaterthan_android_dash_permissions"
       ()
       #f)
      (binding:constant PERMISSION:TILT "PERMISSION_colon_TILT" ())
      (binding:constant PERMISSION:TELEPHONY "PERMISSION_colon_TELEPHONY" ())
      (binding:constant PERMISSION:RECEIVE-SMS "PERMISSION_colon_RECEIVE_dash_SMS" ())
      (binding:constant PERMISSION:SEND-SMS "PERMISSION_colon_SEND_dash_SMS" ())
      (binding:constant PERMISSION:LOCATION "PERMISSION_colon_LOCATION" ())
      (binding:constant PERMISSION:INTERNET "PERMISSION_colon_INTERNET" ())))
   '(moby/runtime/effect-struct
     "runtime/effect-struct.ss"
     ((binding:structure
       effect:raise-sound-volume
       ()
       make-effect:raise-sound-volume
       effect:raise-sound-volume?
       ()
       ())
      (binding:structure
       effect:set-sound-volume
       (volume)
       make-effect:set-sound-volume
       effect:set-sound-volume?
       (effect:set-sound-volume-volume)
       (set-effect:set-sound-volume-volume!))
      (binding:structure
       effect:stop-sound
       (sound)
       make-effect:stop-sound
       effect:stop-sound?
       (effect:stop-sound-sound)
       (set-effect:stop-sound-sound!))
      (binding:function effect? #f 1 #f "effect_question_" () #f)
      (binding:structure
       effect:set-wake-lock
       (locks)
       make-effect:set-wake-lock
       effect:set-wake-lock?
       (effect:set-wake-lock-locks)
       (set-effect:set-wake-lock-locks!))
      (binding:structure
       effect:send-sms
       (address msg)
       make-effect:send-sms
       effect:send-sms?
       (effect:send-sms-address effect:send-sms-msg)
       (set-effect:send-sms-address! set-effect:send-sms-msg!))
      (binding:structure
       effect:release-wake-lock
       ()
       make-effect:release-wake-lock
       effect:release-wake-lock?
       ()
       ())
      (binding:structure
       effect:pause-sound
       (sound)
       make-effect:pause-sound
       effect:pause-sound?
       (effect:pause-sound-sound)
       (set-effect:pause-sound-sound!))
      (binding:structure
       effect:play-dtmf-tone
       (tone duration)
       make-effect:play-dtmf-tone
       effect:play-dtmf-tone?
       (effect:play-dtmf-tone-tone effect:play-dtmf-tone-duration)
       (set-effect:play-dtmf-tone-tone! set-effect:play-dtmf-tone-duration!))
      (binding:structure
       effect:play-sound
       (sound)
       make-effect:play-sound
       effect:play-sound?
       (effect:play-sound-sound)
       (set-effect:play-sound-sound!))
      (binding:structure
       effect:pick-playlist
       (update-f)
       make-effect:pick-playlist
       effect:pick-playlist?
       (effect:pick-playlist-update-f)
       (set-effect:pick-playlist-update-f!))
      (binding:structure
       effect:pick-random
       (n update-f)
       make-effect:pick-random
       effect:pick-random?
       (effect:pick-random-n effect:pick-random-update-f)
       (set-effect:pick-random-n! set-effect:pick-random-update-f!))
      (binding:structure
       effect:lower-sound-volume
       ()
       make-effect:lower-sound-volume
       effect:lower-sound-volume?
       ()
       ())
      (binding:structure effect:none () make-effect:none effect:none? () ())
      (binding:structure effect:beep () make-effect:beep effect:beep? () ())))
   '(moby/runtime/arity-struct
     "runtime/arity-struct.ss"
     ((binding:structure
       arity:mixed
       (arities)
       make-arity:mixed
       arity:mixed?
       (arity:mixed-arities)
       (set-arity:mixed-arities!))
      (binding:structure
       arity:variable
       (min max)
       make-arity:variable
       arity:variable?
       (arity:variable-min arity:variable-max)
       (set-arity:variable-min! set-arity:variable-max!))
      (binding:function arity? #f 1 #f "arity_question_" () #f)
      (binding:structure
       arity:fixed
       (n)
       make-arity:fixed
       arity:fixed?
       (arity:fixed-n)
       (set-arity:fixed-n!))))
   '(moby/runtime/error-struct
     "runtime/error-struct.ss"
     ((binding:structure
       moby-error-type:duplicate-identifier
       (id other-location)
       make-moby-error-type:duplicate-identifier
       moby-error-type:duplicate-identifier?
       (moby-error-type:duplicate-identifier-id moby-error-type:duplicate-identifier-other-location)
       (set-moby-error-type:duplicate-identifier-id!
        set-moby-error-type:duplicate-identifier-other-location!))
      (binding:structure
       moby-error-type:unclosed-lexical-token
       ()
       make-moby-error-type:unclosed-lexical-token
       moby-error-type:unclosed-lexical-token?
       ()
       ())
      (binding:structure
       moby-error-type:undefined-identifier
       ()
       make-moby-error-type:undefined-identifier
       moby-error-type:undefined-identifier?
       ()
       ())
      (binding:structure
       moby-error-type:unrecognized-lexical-token
       ()
       make-moby-error-type:unrecognized-lexical-token
       moby-error-type:unrecognized-lexical-token?
       ()
       ())
      (binding:structure
       moby-error-type:unsupported-lexical-token
       ()
       make-moby-error-type:unsupported-lexical-token
       moby-error-type:unsupported-lexical-token?
       ()
       ())
      (binding:structure
       moby-error-type:unclosed-parentheses
       ()
       make-moby-error-type:unclosed-parentheses
       moby-error-type:unclosed-parentheses?
       ()
       ())
      (binding:structure
       moby-error-type:index-out-of-bounds
       (minimum maximum observed)
       make-moby-error-type:index-out-of-bounds
       moby-error-type:index-out-of-bounds?
       (moby-error-type:index-out-of-bounds-minimum
        moby-error-type:index-out-of-bounds-maximum
        moby-error-type:index-out-of-bounds-observed)
       (set-moby-error-type:index-out-of-bounds-minimum!
        set-moby-error-type:index-out-of-bounds-maximum!
        set-moby-error-type:index-out-of-bounds-observed!))
      (binding:structure
       moby-error-type:missing-expression
       ()
       make-moby-error-type:missing-expression
       moby-error-type:missing-expression?
       ()
       ())
      (binding:structure
       moby-error-type:type-mismatch
       (who position expected observed)
       make-moby-error-type:type-mismatch
       moby-error-type:type-mismatch?
       (moby-error-type:type-mismatch-who
        moby-error-type:type-mismatch-position
        moby-error-type:type-mismatch-expected
        moby-error-type:type-mismatch-observed)
       (set-moby-error-type:type-mismatch-who!
        set-moby-error-type:type-mismatch-position!
        set-moby-error-type:type-mismatch-expected!
        set-moby-error-type:type-mismatch-observed!))
      (binding:structure
       moby-error-type:generic-runtime-error
       ()
       make-moby-error-type:generic-runtime-error
       moby-error-type:generic-runtime-error?
       ()
       ())
      (binding:structure
       moby-error-type:generic-syntactic-error
       (other-locations)
       make-moby-error-type:generic-syntactic-error
       moby-error-type:generic-syntactic-error?
       (moby-error-type:generic-syntactic-error-other-locations)
       (set-moby-error-type:generic-syntactic-error-other-locations!))
      (binding:structure
       moby-error-type:application-arity
       (expected observed)
       make-moby-error-type:application-arity
       moby-error-type:application-arity?
       (moby-error-type:application-arity-expected moby-error-type:application-arity-observed)
       (set-moby-error-type:application-arity-expected!
        set-moby-error-type:application-arity-observed!))
      (binding:structure
       moby-error-type:conditional-exhausted
       ()
       make-moby-error-type:conditional-exhausted
       moby-error-type:conditional-exhausted?
       ()
       ())
      (binding:structure
       moby-error
       (reason location error-type)
       make-moby-error
       moby-error?
       (moby-error-reason moby-error-location moby-error-error-type)
       (set-moby-error-reason! set-moby-error-location! set-moby-error-error-type!))))))

(provide MOBY-RUNTIME-MODULE-BINDINGS)