Moby
------
Danny Yoo (dyoo@cs.wpi.edu)


----------------------------------------------------------------------

What is Moby?

Moby is a compiler that consumes Beginner Language Scheme programs and
produces applications for mobile platforms.  The current prototype
supports the J2ME and Android platforms.  The Beginner Language
programs can use the primitives provided by the World Teachpack.  Our
long-term goal is to make Scheme the premiere reactive scripting
language for mobile phones.


----------------------------------------------------------------------

How does it work?

The compiler takes a Beginner Language program and translates it to
Java code; Beginner Language Scheme is simple enough that's it's
fairly easy to do this.  Many of the Beginner Language primitives have
been reimplemented in a Java runtime library that's included with the
compiled application.

To implement the world primitives, we use the graphical components in
the J2ME platform to implement the functionality of the world
Teachpack.  But because we also want to support Android, we use
adapter classes to bridge between our J2ME code and Android.  In this
way, we should be able to support both platforms with a lot of code
reuse.


----------------------------------------------------------------------

Dependencies

The following are required:

  Java >=1.6
  Apache Ant >=1.7.1
  PLT Scheme >=4.1.3


Furthermore, you need at least one of these to produce applications
for the respective platforms:

    Sun Wireless Toolkit (http://java.sun.com/products/sjwtoolkit/),
    which provides J2ME application support.

    Google Android SDK (http://code.google.com/android/).

----------------------------------------------------------------------

What needs to be implemented?

See doc/TODO.

----------------------------------------------------------------------

Installation


To install:

    1.  Grab our sources:

        $ svn checkout \
          http://svn.plt-scheme.org/usr/dyoo/moby/trunk \
          moby

    2.  Edit config.ss.  The system currently has hardcoded paths to
        Apache Ant, the Sun Wireless Toolkit, and Android SDK embedded
        as the parameters within src/config.ss.  You should change
        those paths to the ones on your system.

    3.  Add a symbolic link from moby/src/mock-libs to collects/moby.

        For example, if moby is under the home directory, and PLT Scheme
        under the ~/local/plt directory, then the command:

            $ ln -s ~/moby/src/mock-libs ~/local/plt/collects/moby

        will set up the necessary symbolic link.

    4.  Run the regression test suite.  Instructions on running the
        test suite are in the next section.


----------------------------------------------------------------------

Regression test suite


We've got the beginnings of a regression test suite in
src/test-compile-world.ss.  The regression suite compiled the Scheme
programs in src/test/; compiled executables are stored in src/bin for
manual inspection.

To run the regression test suite, run the src/test-compile-world.ss
program.  If everything runs successfully, every sub-subdirectory in
src/bin will each contain a compiled application, for both J2ME and
Android targets.  Each application that's produced will have an ant
file that you can use to install the application into Sun's emulator.

For the J2ME binaries, use

    ant run

to start the emulator.


For Android, first start the emulator, then either use

    ant install
    ant reinstall


Example
======

## Compile everything through MrEd.  Running through DrScheme will
## also work.

dyoo@mithril:~/moby/src$ mred test-compile-world.ss

## This should take some time.

dyoo@mithril:~/moby/src$

## Let's try out the falling-ball example.  The source for the 
## falling ball example is in test/falling-ball.ss.


dyoo@mithril:~/moby/src$ cd bin
dyoo@mithril:~/moby/src/bin$ ls
android  j2me

## We have binaries for both the Android and J2ME platforms.

dyoo@mithril:~/moby/src/bin$ cd j2me/falling-ball

## The J2ME build scripts have a convenient 'run' target to start
## the emulator on the program.

dyoo@mithril:~/moby/src/bin/j2me/falling-ball$ ant run

## The emulator should show a red falling ball descending
## the screen of the mobile phone.
 

## Let's test the Android binary.  If you haven't started up the
## emulator, do so now.

dyoo@mithril:~/moby/src/bin/j2me/falling-ball$ cd ../../android/falling-ball
dyoo@mithril:~/moby/src/bin/android/falling-ball$ ant install

## The application should deploy into the emulator.




----------------------------------------------------------------------

Unit tests

Minimal unit tests live in src/test.  To run the unit tests, run the
build.xml in src/test with ant.  Here's an example run of the test
suite:

######################################################################
dyoo@mithril:~/moby cd src/test
dyoo@mithril:~/moby/src/test$ ant
Buildfile: build.xml

init:

compile:
    [javac] Compiling 1 source file to /home/dyoo/moby/src/test/build

test:
    [junit] Testsuite: org.plt.TestKernel
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.041 sec
    [junit] 
    [junit] Testcase: testEmpty took 0.011 sec
    [junit] Testsuite: org.plt.TestMath
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 0.05 sec
    [junit] 
    [junit] Testcase: testAdd took 0.003 sec
    [junit] Testcase: testSymbol took 0.001 sec
    [junit] Testcase: testModulo took 0 sec
    [junit] Testcase: testCeiling took 0 sec
    [junit] Testcase: testFloor took 0 sec
    [junit] Testcase: testAbs took 0.008 sec
    [junit] Testcase: testAcos took 0 sec
    [junit] Testcase: testAsin took 0 sec
    [junit] Testcase: testAtan took 0 sec

BUILD SUCCESSFUL
Total time: 1 second
######################################################################



