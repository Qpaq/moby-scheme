world-compiler
------
Danny Yoo (dyoo@cs.wpi.edu)


----------------------------------------------------------------------

What is it?

A compiler from Beginner Scheme programs that use the world.ss
teachpack to j2me and android applications.

----------------------------------------------------------------------

Dependencies

The following are required:

  Java >=1.6
  Apache Ant
  PLT Scheme >=4.1.3

Furthermore, you need at least one of these (preferably both):

    Sun Wireless Toolkit (http://java.sun.com/products/sjwtoolkit/)

    Google Android SDK

----------------------------------------------------------------------

Installation

The system currently has hardcoded paths to Apache Ant, the Sun
Wireless Toolkit, and Android SDK embedded as the parameters within
src/config.ss.  You should change those paths to the ones on your
system.

----------------------------------------------------------------------

Regression tests


We've got the beginnings of a regression test suite in
src/test-compile-world.ss.  The regression suite compiled the Scheme
programs in src/test/; compiled executables are stored in src/bin for
manual inspection.

To run the regression test suite, run the src/test-compile-world.ss
program.  If everything runs successfully, every sub-subdirectory in
src/bin will each contain a compiled application, for both J2ME and
Android targets.  Each application that's produces will have an ant
file that you can use to install the application into Sun's emulator.

For the J2ME binaries, use

    ant run

to kick start the emulator.


For Android, first start the emulator, then either use

    ant install
    ant reinstall


Example
======

## Compiling everything through MrEd (running throught DrScheme will
## also work.)

dyoo@mithril:~/Dropbox/j2me-world/src$ mred test-compile-world.ss

## This should take some time.

dyoo@mithril:~/Dropbox/j2me-world/src$

## Let's try out the falling-ball example.  The source for the 
## falling ball example is in test/falling-ball.ss.


dyoo@mithril:~/work/world-compiler/src$ cd bin
dyoo@mithril:~/work/world-compiler/src/bin$ ls
android  j2me

## We have binaries for both the android and j2me platforms.

dyoo@mithril:~/Dropbox/j2me-world/src/bin$ cd j2me/falling-ball

## The j2me build scripts have a convenient 'run' target to start up
## the emulator on the program.

dyoo@mithril:~/Dropbox/j2me-world/src/bin/j2me/falling-ball$ ant run

## The emulator should pop up, and a red falling ball should descend
## down the screen of the cellphone.
 

## Let's test the android binary.  If you haven't started up the
## emulator, do so now.

dyoo@mithril:~/work/world-compiler/src/bin/j2me/falling-ball$ cd ../../android/falling-ball
dyoo@mithril:~/work/world-compiler/src/bin/android/falling-ball$ ant install

## The application should deploy into the emulator.




----------------------------------------------------------------------

Unit tests

Minimal unit tests live in src/test.  To run the unit tests, run the
build.xml in src/test with ant.  Here's an example run of the test
suite:

######################################################################
dyoo@mithril:~/work/world-compiler$ cd src/test
dyoo@mithril:~/work/world-compiler/src/test$ ant
Buildfile: build.xml

init:

compile:
    [javac] Compiling 1 source file to /home/dyoo/work/world-compiler/src/test/build

test:
    [junit] Testsuite: org.plt.TestKernel
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.041 sec
    [junit] 
    [junit] Testcase: testEmpty took 0.011 sec
    [junit] Testsuite: org.plt.TestMath
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 0.05 sec
    [junit] 
    [junit] Testcase: testAdd took 0.003 sec
    [junit] Testcase: testSymbol took 0.001 sec
    [junit] Testcase: testModulo took 0 sec
    [junit] Testcase: testCeiling took 0 sec
    [junit] Testcase: testFloor took 0 sec
    [junit] Testcase: testAbs took 0.008 sec
    [junit] Testcase: testAcos took 0 sec
    [junit] Testcase: testAsin took 0 sec
    [junit] Testcase: testAtan took 0 sec

BUILD SUCCESSFUL
Total time: 1 second
######################################################################



----------------------------------------------------------------------

What needs to be done?

See doc/TODO.