Moby
------
Danny Yoo (dyoo@cs.wpi.edu)


----------------------------------------------------------------------

What is Moby?

Moby is a project from the PLT Scheme team.  The Moby compiler
consumes Intermediate Student Language (ISL) programs that use World
primitives, and produces applications for mobile platforms.  The
current prototype supports the Android platform.  Our long-term goal
is to make Scheme the premiere reactive scripting language for mobile
phones.

Shriram Krishnamurthi presented the ideas behind Moby at ILC 2009;
his talk "The Moby Scheme Compiler for Smartphones" can be found here:

    http://www.cs.brown.edu/~sk/Publications/Talks/Moby-Bootstrap/


----------------------------------------------------------------------

How does it work?

The compiler takes a ISL program and translates it to Javascript code.
We've reimplemented the ISL primitives in a Javascript runtime library
that's included with the compiled application.

To support Android, we use a bridge library called Phonegap, which
provides access to the native facilities of several cell phones.  In
this way, we should be able to support multiple platforms with a lot
of code reuse.  We handle the other libraries (tilt, location, sms,
music), though with support only for the Android platforms for now.


----------------------------------------------------------------------

Dependencies

You need the following:

  Java >=1.6 (http://java.sun.com/)
  Apache Ant >=1.7.1 (http://ant.apache.org/)
  PLT Scheme >=4.1.3 (http://plt-scheme.org/)
  Google Android SDK >= 1.5r3 (http://developer.android.com/)


----------------------------------------------------------------------


To install Moby:

    1.  Grab the Moby source, currently hosted on github at:

        http://github.com/dyoo/moby-scheme/tree/master

    For example:

        $ git clone git://github.com/dyoo/moby-scheme.git moby

    2.  Switch to the development branch.

        $ git checkout devel


    3.  Pull other dependency packages.  Moby depends on two
    additional libraries that we are developing: (1) jsworld (2)
    phonegap.  The following command will bring both of those
    dependencies into the source tree.

        $ git submodule init
        $ git submodule update


    3.  Edit moby/src/config.ss.  The system hardcodes
        paths to Apache Ant and Android SDK embedded as parameters
        within src/config.ss.  You should change those paths to the
        ones on your system.

    3.  Add a symbolic link from moby to the collects directory of
    your PLT Scheme installation.

        For example, if moby is under the home directory, and PLT Scheme
        under the ~/local/plt directory, then the command:

            $ ln -s ~/moby ~/local/plt/collects/moby

        will set up the necessary symbolic link.


----------------------------------------------------------------------

Running Moby from the command line


At this point, you can run the Moby command line utility
(moby/src/moby.ss) on a BSL program.  Moby supports two backends, both
which rely on Javascript:

    * js+android-phonegap: compiles to Android application; can also
      use features of the mobile platform.

    * js: compiles to web application 


By default, the command line utility with compile with the
js+android-phonegap backend.  Let's run moby on the falling-ball.ss
example in moby/examples/falling-ball.ss:

    $ cd moby/examples
    $ mred ../src/moby.ss falling-ball.ss
    $ cd FallingBall
    $ ls
    AndroidManifest.xml  build.properties    gen               res
    assets               build.xml           libs              src
    bin                  default.properties  local.properties  tests

    $ ls bin
    classes  classes.dex  DroidGap.ap_  DroidGap-debug.apk

DroidGap-debug.apk is the compiled Android binary.  The Ant build.xml
build-script in the FallingBall directory can install, uninstall, and
reinstall the application if the Android emulator is online.

    $ ant install
Buildfile: build.xml

[some output cut]

install:
     [echo] Installing bin/DroidGap-debug.apk onto default emulator...
     [exec] 1594 KB/s (120997 bytes in 0.074s)
03:38 I/ddms: Created: [Debugger 8610-->1641 inactive]
03:38 I/ddms: Good handshake from client, sending HELO to 1641
     [exec] 	pkg: /data/local/tmp/DroidGap-debug.apk
     [exec] Success
03:39 I/ddms: Closing [Client pid: 1641]

BUILD SUCCESSFUL
Total time: 6 seconds


After this, you can look at the Android emulator, which should now
have the FallingBall application installed.


----------------------------------------------------------------------
