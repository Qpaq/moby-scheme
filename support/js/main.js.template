var main = {};


(function() {

var listener = {};

var rat = org.plt.types.Rational.makeInstance;

listener.orientUpdate = function(azimuth, pitch, roll) {
  org.plt.world.Kernel.updateWorld(function(w) {
     if (org.plt.world.config.CONFIG.lookup('onTiltEffect')) {
         var effect = org.plt.world.config.CONFIG.lookup('onTiltEffect')([w, rat(azimuth, 1), rat(pitch, 1), rat(roll, 1)]);
         org.plt.world.Kernel.applyEffect(effect);
     }

     if (org.plt.world.config.CONFIG.lookup('onTilt')) {
         return org.plt.world.config.CONFIG.lookup('onTilt')([w, rat(azimuth, 1), rat(pitch, 1), rat(roll, 1)]);
     } else {
         return w;
     }
  });
};

listener.accelUpdate = function(x, y, z) {
  org.plt.world.Kernel.updateWorld(function(w) {
      if (org.plt.world.config.CONFIG.lookup('onAccelerationEffect')) {
          var effect = org.plt.world.config.CONFIG.lookup('onAccelerationEffect')([w, rat(x, 1), rat(y, 1), rat(z, 1)]);
          org.plt.world.Kernel.applyEffect(effect);
      }
   
      if (org.plt.world.config.CONFIG.lookup('onAcceleration')) {
          return org.plt.world.config.CONFIG.lookup('onAcceleration')([w, rat(x, 1), rat(y, 1), rat(z, 1)]);
      } else {
          return w;
      }
  });
};

listener.shakeUpdate = function() {
  var onShake = org.plt.world.config.CONFIG.lookup('onShake');
  var onShakeEffect = org.plt.world.config.CONFIG.lookup('onShakeEffect');
  if (onShake) {
     org.plt.world.Kernel.updateWorld(function(w) {

       if (onShakeEffect) { 
           var effect = onShakeEffect([w]);
           org.plt.world.Kernel.applyEffect(effect);
       }

       return onShake([w]);
    });
  }
};

listener.locUpdate = function(lat, lng) {
  var onLocationChange = org.plt.world.config.CONFIG.lookup('onLocationChange');
  var onLocationChangeEffect = org.plt.world.config.CONFIG.lookup('onLocationChangeEffect');

  if (onLocationChange) {
    org.plt.world.Kernel.updateWorld(function(w) {

      if (onLocationChangeEffect) {
          var effect = onLocationChangeEffect([w, rat(lat), rat(lng)]);
          org.plt.world.Kernel.applyEffect(effect);
      }
      return onLocationChange([w, rat(lat), rat(lng)]);
    });
  }
};


main.startup = function() {

<<ON-START>>
};

main.shutdown = function() {
<<ON-PAUSE>>
};


main.destroy = function() {
<<ON-DESTROY>>
};


// Waits until all images are loaded, after which we
// evaluate the after thunk.
main.afterPreloadImages = function(after) {
  var imagePaths = <<IMAGES>>;
  var images = [];
  function wait(predicate, after) {
      if (predicate()) 
	  after();
      else
	  setTimeout(function() { wait(predicate, after); },
		     100);
  }

  function isAllLoaded() {
      var i;
      for (i = 0; i < images.length; i++) {
	  if (! (images[i].isLoaded)) {
	      return false;
	  }
      }
      return true;
  }

  var i;
  for (i = 0; i < imagePaths.length; i++) {
      images.push(org.plt.world.Kernel._kernelCreateImage
		  (org.plt.types.String.makeInstance(imagePaths[i])));
  }
  wait(isAllLoaded, after);
};


main.runToplevel = function() {
   (<<PROGRAM-TOPLEVEL-EXPRESSIONS>>)(org.plt.Kernel.identity);
};

<<PROGRAM-DEFINITIONS>>



})();
