package j2ab.android.app;

import org.plt.<<PROGRAM-NAME>>.R;

import j2ab.android.io.LogOutputStream;
import j2ab.android.lcdui.Toolkit;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.Properties;

import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.midlet.MIDlet;
import javax.microedition.rms.RecordStore;

import android.app.Activity;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.View;


public class J2ABMIDletActivity extends Activity implements Toolkit
{
	private static final String SYSTEM_OUT = "System.out";
	private static final String SYSTEM_ERR = "System.err";
	private static final String JAD_PROPERTIES = "jad.properties"; 
	private static final String MIDLET_PROPERTY = "midlet";

	private MIDlet midlet;
	private Menu menu;
	private View defaultView;
	private Handler handler;
	private Thread eventThread;
	private Object lock = new Object();
	
	public static J2ABMIDletActivity DEFAULT_ACTIVITY;
	
	public J2ABMIDletActivity()
	{
		DEFAULT_ACTIVITY = this;
		
		((org.plt.platform.AndroidPlatform)
		 org.plt.platform.Platform.getInstance())
		    .setActivity(this);
	}
	
	public MIDlet getMIDlet()
	{
		return this.midlet;
	}
	
	public Handler getHandler() 
    {
		return handler;
	}
	
	public void invokeAndWait( final Runnable runnable )
	{
		if( Thread.currentThread() == this.eventThread )
		{
			runnable.run();
		}
		else
		{
			Runnable r = new Runnable()
			{
				public void run()
				{
					synchronized( J2ABMIDletActivity.this.lock )
					{
						runnable.run();
						J2ABMIDletActivity.this.lock.notify();
					}
				}
			};
			synchronized( this.lock )
			{
				this.handler.post( r );
				try
				{
					this.lock.wait();
				}
				catch( InterruptedException ex )
				{
					ex.printStackTrace();
				}
			}
		}
	}

	private void list( String path, AssetManager assetManager )
		throws IOException
	{
    	String[] assets = assetManager.list( path );
    	Log.v( getClass().getName(), "found "+assets.length+" assets for "+path );
    	for( int i=0; i<assets.length; i++ )
    	{
    		String asset = assets[ i ];
    		Log.v( getClass().getName(), "asset "+i+"="+asset );
    		list( path + asset, assetManager );
    	}
	
	}
	
	public View getDefaultView() {
		return this.defaultView;
	}
	
	@Override
	protected void onCreate(Bundle icicle) 
	{
    	super.onCreate( icicle );
    	this.handler = new Handler();
    	this.eventThread = Thread.currentThread();
    	// NOTE : you must start the application in verbose logging mode for this to work!
    	//if( Log.isLoggable( SYSTEM_ERR, LogOutputStream.LOG_LEVEL ) )
    	{
    		System.setErr( new PrintStream( new LogOutputStream( SYSTEM_ERR ) ) );
    	}
    	//if( Log.isLoggable( SYSTEM_OUT, LogOutputStream.LOG_LEVEL ) ) 
    	{
    		System.setOut( new PrintStream( new LogOutputStream( SYSTEM_OUT ) ) );
    	}    	
    	
    	// throw in a dummy window so we can get accurate screen sizes for full screen components prior to them 
    	// having been shown
    	// this is a nasty hack
    	View splash = this.getLayoutInflater().inflate( R.layout.splash, null, false );
    	this.defaultView = splash;
    	setContentView( splash );
	}
	
	private MIDlet createMIDlet()
	{
    	// create a new class loader that correctly handles getResourceAsStream!
    	Properties properties = new Properties();
    	try
    	{
	    	//InputStream ins = resources.openRawResource( R.raw.jad );
//    		int id = resources.getIdentifier( "com.kannuu.android.app:raw/jad", null, null );
//    		InputStream ins = resources.openRawResource( id );
    		//InputStream ins = assetManager.open( "com.kannuu.android.app:/raw/jad" );
    		//InputStream ins = ResourceAsStreamClassLoader.getRawResourceAsStream( this, JAD_PROPERTIES );
    		InputStream ins = this.getClass().getResourceAsStream( "/"+JAD_PROPERTIES );
	    	properties.load( ins );
    	}
    	catch( Exception ex )
    	{
    		throw new RuntimeException( "error loading "+JAD_PROPERTIES, ex );
    	}
    	String midletClassName = properties.getProperty( MIDLET_PROPERTY );
    	RecordStore.setApplicationName( midletClassName );
    	ClassLoader classLoader;
//    	classLoader = new ResourceAsStreamClassLoader( 
//    			this.getClassLoader(), 
//    			resources, 
//    			R.class
//    	);
    	classLoader = this.getClassLoader();
    	MIDlet midlet;
    	MIDlet.DEFAULT_ACTIVITY = this;
    	MIDlet.DEFAULT_TOOLKIT = this;
    	MIDlet.DEFAULT_APPLICATION_PROPERTIES = properties;
    	try
    	{
	    	Class midletClass = Class.forName( midletClassName, true, classLoader );
	    	midlet = (MIDlet) midletClass.newInstance();
    	}
    	catch( Exception ex )
    	{
    		throw new RuntimeException( "unable to load class "+midletClassName, ex );
    	}
    	if( this.menu != null )
    	{
    		midlet.setMenu( this.menu );
    		this.menu = null;
    	}
    	return midlet;
	}
	
    @Override
    protected void onDestroy()
    {
        try
        {
        	if( this.midlet != null )
        	{
        		this.midlet.doDestroyApp( true );
        		this.midlet = null;
        	}
        }
        catch( Exception ex )
        {
            throw new RuntimeException( "unable to destroy", ex );
        }
        //this.resources.getAssets().release();
        super.onDestroy();
    }
    
    

    @Override
	protected void onPause() 
    {
        try
        {
        	if( this.midlet != null )
        	{
        		this.midlet.doPauseApp();
        	}
        }
        catch( Exception ex )
        {
        	ex.printStackTrace();
            throw new RuntimeException( "unable to freeze app", ex );
        }
    	super.onPause();
	}

    @Override
    protected void onResume()
    {
        super.onResume();

        if( this.midlet == null )
        {
	    	Thread thread = new Thread() {
	    		public void run(){
	    			while( defaultView.getWidth() == 0 )
	    			{
		    			try
		    			{
		    				Thread.sleep( 500 );
		    				System.out.println( "W:"+defaultView.getWidth()+",H:"+defaultView.getHeight()+",MW:"+defaultView.getMeasuredWidth()+",MH:"+defaultView.getMeasuredHeight() );
		    			}catch( Exception ex )
		    			{
		    				ex.printStackTrace();
		    			}
	    			}
	    			MIDlet midlet = createMIDlet();
	    			J2ABMIDletActivity.this.midlet = midlet;
	    	        try
	    	        {
	    	        	if( midlet != null )
	    	        	{
	    	        		midlet.doStartApp();
	    	        	}
	    	        }
	    	        catch( Exception ex )
	    	        {
	    	        	ex.printStackTrace();
	    	        }
	    		}
	    	};
	    	thread.start();
        }
        else
        {
	        try
	        {
        		this.midlet.doStartApp();
	        }
	        catch( Exception ex )
	        {
	        	ex.printStackTrace();
	        	throw new RuntimeException( "couldn't start MIDlet" );
	        }
        }

    }
	@Override
	public boolean onCreateOptionsMenu( Menu menu ) 
	{
		if( this.midlet != null )
		{
			this.midlet.setMenu( menu );
		}
		else
		{
			this.menu = menu;
		}
		return super.onCreateOptionsMenu( menu );
	}
	
	@Override
	public boolean onKeyDown( int keyCode, KeyEvent event ) 
	{
		if( keyCode == KeyEvent.KEYCODE_BACK )
		{
			// we need to see if there is a back option in the current display
			Displayable displayable = Display.getDisplay( this.midlet ).getCurrent();
			for( Command c : displayable.getCommands() )
			{
				if( c.getCommandType() == Command.BACK )
				{
					// manually call the back operation: YECH!
					displayable.getCommandListener().commandAction( c, displayable );
					return true;
				}
			}
		}
		return super.onKeyDown(keyCode, event);
	}

	public int getResourceId(String resourceName) {
		// slow, slow, slow (cache?)
		// mmmmm, introspection
		String[] splits = resourceName.split( "\\." );
		Class c = R.class;
		for( int i=0; i<splits.length; i++ ) {
			String name = splits[ i ];
			if( i < splits.length - 1 ) {
				Class[] childClasses = c.getDeclaredClasses();
				Class found = null;
				for( int j=0; j<childClasses.length; j++ ) {
					Class childClass = childClasses[ j ];
					String separator;
					
					if( childClass.getName().endsWith( "$"+name ) ) {
						found = childClass;
						break;
					}
				}
				if( found == null ) {
					throw new RuntimeException( "no class "+resourceName+"("+name+") in "+c.getName() );
				} else {
					c = found;
				}
			} else {
				try {
					Field field = c.getField( name );
					return field.getInt( null );
				} catch( Exception ex ) {
					throw new RuntimeException( "no field "+name+" in "+c.getName() );
				}
			}
		}
		throw new RuntimeException( "no resource "+resourceName );
	}

	public int getScreenHeight() {
		return this.defaultView.getHeight();
	}

	public int getScreenWidth() {
		return this.defaultView.getWidth();
	}

	public View inflate(int resourceId) {
		return this.getLayoutInflater().inflate( resourceId, null, false );
	}


	
}
