package org.plt.<<PROGRAM-NAME>>;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import org.plt.platform.PlatformI;
import org.plt.platform.Platform;

import org.plt.world.WorldRunner;
import org.plt.world.WorldConsumer;
import org.plt.world.WorldTransformer;
import org.plt.WorldKernel;

import org.plt.world.MessageListener;
import org.plt.world.LocationChangeListener;
import org.plt.world.OrientationChangeListener;
import org.plt.world.AccelerationChangeListener;



// This is stub code.
// The following things must be plugged in:
// 
// PROGRAM-NAME
// PROGRAM-DEFINITIONS
// PROGRAM-TOPLEVEL-EXPRESSIONS
// ON-START
// ON-PAUSE
// ON-DESTROY


public class <<PROGRAM-NAME>> extends MIDlet 
    implements WorldConsumer,
	       MessageListener, 
	       LocationChangeListener, 
	       OrientationChangeListener,
	       AccelerationChangeListener  {
    static class UserProgram {
        // Important: definitions must come first, because they'll
        // include static blocks that initialize values that
        // we depend on later!
        <<PROGRAM-DEFINITIONS>>
        public static void runToplevel() {
	    <<PROGRAM-TOPLEVEL-EXPRESSIONS>>;
	}
    }

    MyCanvas canvas;
    WorldRunner runner;


    // When a program is paused, we'll restart the world.
    public void pauseApp() {
	this.runner.stop();
	// IMPORTANT: The injected code here assumes the
	// presense of a 'listener' variable that
	// can be used to register callbacks.
	<<PROGRAM-NAME>> listener = this;
	<<ON-PAUSE>>
    }


    public void destroyApp(boolean unconditional) {
	this.runner.stop();
	// IMPORTANT: The injected code here assumes the
	// presense of a 'listener' variable that
	// can be used to register callbacks.
	<<PROGRAM-NAME>> listener = this;
	<<ON-DESTROY>>
    }	


    public void startApp() {
	this.runner = new WorldRunner();
	this.runner.addListener(this);
	WorldKernel.setRunner(this.runner);
	this.canvas = new MyCanvas();
	// IMPORTANT: The injected code here assumes the
	// presence of a 'listener' variable that
	// can be used to register callbacks.
	<<PROGRAM-NAME>> listener = this;
	<<ON-START>>
	Display.getDisplay(this).setCurrent(canvas);


	new Thread() {
	    public void run() {
		UserProgram.runToplevel();
	    }
	}.start();
    }


    // WorldConsumer: we get the new world and show it!
    public void consume(Object newWorld) {
	if (this.canvas != null)
	    this.canvas.repaint();
    }


    public void onMessage(final Object aMessage) {
	this.runner.queueTransformer(new WorldTransformer() {
	    public Object transform(Object world) {
		return WorldKernel.getOnMessageEventHandler().call
		    (new Object[] { world, aMessage});
	    }
	    });
    }

    public void onLocationChange(final Object latitude,
				 final Object longitude) {
	this.runner.queueTransformer(new WorldTransformer() {
	    public Object transform(Object world) {
		return WorldKernel.getOnLocationChangeEventHandler().call
		    (new Object[] { world, latitude, longitude });
	    }
	    });
    }

    public void onOrientationChange(final Object azimuth, 
				    final Object pitch,
				    final Object roll) {
	this.runner.queueTransformer(new WorldTransformer() {
	    public Object transform(Object world) {
		return WorldKernel.getOnOrientationChangeEventHandler().call
		    (new Object[] { world, azimuth, pitch, roll });
	    }
	    });
    }


    public void onAccelerationChange(final Object x,
				     final Object y,
				     final Object z) {
	this.runner.queueTransformer(new WorldTransformer() {
	    public Object transform(Object world) {
		return WorldKernel.getOnAccelerationChangeEventHandler()
		    .call(new Object[] { world, x, y, z });
	    }
	    });
    }





    class MyCanvas extends Canvas {

	public void paint(Graphics g) {
	    if (runner.getWorld() == null)
		return;

            org.plt.gui.GraphicsAdapter ag = 
		new org.plt.gui.GraphicsAdapter(g);
	    // #4,5,6 on-redraw expression
	    org.plt.gui.DrawPicture pVisitor = 
		new org.plt.gui.DrawPicture(ag);
	    org.plt.gui.Scene aScene =
		(org.plt.gui.Scene) WorldKernel.getOnRedrawHandler().call
		(new Object[] {runner.getWorld()});
	    aScene.accept(pVisitor, 0, 0);
	}


	protected void keyPressed(int keyCode) {
	    final Object aKey = translateKeyCode(keyCode);
	    runner.queueTransformer(new WorldTransformer() {
		    public Object transform(Object world) {
			return WorldKernel.getOnKeyEventHandler().call
			    (new Object[] {world, aKey});
		    }
		});
	}

	private Object translateKeyCode(int keyCode) {
	    switch(getGameAction(keyCode)) {
	    case Canvas.LEFT: return "left";
	    case Canvas.RIGHT: return "right"; 
	    case Canvas.UP: return "up";
	    case Canvas.DOWN: return "down";
	    default:
		if (keyCode > 0) {
		    return new Character((char)keyCode);
		} else {
		    return "";
		}
	    }
	}
    }
}
