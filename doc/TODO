Here are the TODOs:


If you wish to take any of these on, please contact us

    Danny Yoo <dyoo@cs.wpi.edu>,
    Shriram Krishnamurthi <sk@cs.brown.edu>

first to consult on the design of solutions.

----------------------------------------------------------------------

* Implement more of the Beginner Scheme primitives in the runtime.
The list of primitives comes at the end of this file.

* Remove unnecessary classes like MicroFloat from Android platform
compilation.  Android guarantees a floating-point unit; our current
implementation uses the MicroFloat fixed-point library even though we
don't need it.

* Expose Android-specific functionality.  Definitely talk to us before
tackling this one: we want to make sure the design matches the
functional flavor of the world primitives.

* Currently, anyone who wants to use the compiler needs to install the
dependencies, and this is a hassle.  We would like people to use this
package directly from DrScheme without having to install these
SDKs.  An XMLRPC hook to the compiler functions in
compile-world.ss seems to be the simplest route to expose the
compiler.

    * Once the XMLRPC hook is available, we want a DrScheme tool that
      talks to it.  A menu option similar to "Create Executable"
      should be available from DrScheme that takes the user's program
      to the network-available compiler to get the application.

* The bridge classes we've adopted for the J2ME-Android bridge are not
  reproducing correct behavior.  We need someone to catalog the
  graphical deviations in the Android-J2ME bridge classes.  Compare
  the graphical output of the J2ME and Android applications in the
  regression test suite and note the differences.

* Add unit test cases for the functions in org.plt.Kernel.  There are
  very few tests at this point.  Any new primitives should have tests
  written for them.  These tests should be in
  src/test/java-src/org/plt/TestKernel.java, exercising code that's in
  support/common/src/org/plt/Kernel.java.


* Fix the deviations listed in DESIGN.

* Improve the design of the numeric support.  For expediency, the
  kernel code reproduced the behavior of the numeric tower with a
  bunch of hardcoded if statements.  We want to look existing
  implementations of the numeric tower from other Java Scheme systems
  like SISC and adopt one of them.


----------------------------------------------------------------------

Details on Web Service TODO

We want to be able to call the generate-j2me-application and
generate-android-application functions from a network client.
Actually, the signatures should be slightly different.  There should
be a wrapper function for generate-j2me-application (similarly for
generate-android-application) that takes in bytes rather than a
filename:

;; make-fresh-j2me-application: string bytes -> bytes
;; Given the name of the application and the bytes 
;; of the beginner-level program, produce the bytes
;; of the jar.


A thin XMLRPC hook would then be a simple way to access this function
from the network.  Then we could add a DrScheme tool to invoke the
compiler from a menu option so that we integrate really well into the
existing environment as an item just like "Create Executable."



----------------------------------------------------------------------

Details on Beginner Scheme primitives:


Primitives that need implementation:


(angle
 complex?
 conjugate
 current-seconds
 exact->inexact
 exact?
 imag-part
 inexact->exact
 inexact?
 integer->char
 magnitude
 make-polar
 real-part
 real?
 assq
 member
 memq
 memv
 char->integer
 char-alphabetic?
 char-ci<=?
 char-ci<?
 char-ci=?
 char-ci>=?
 char-ci>?
 char-downcase
 char-lower-case?
 char-numeric?
 char-upcase
 char-upper-case?
 char-whitespace?
 char<=?
 char<?
 char=?
 char>=?
 char>?
 char?
 format
 list->string
 make-string
 string
 string->list
 string->number
 string->symbol
 string-append
 string-ci<=?
 string-ci<?
 string-ci=?
 string-ci>=?
 string-ci>?
 string-copy
 string-length
 string-ref
 string<=?
 string<?
 string>=?
 string>?
 string?
 substring
 image=?
 image?
 eof
 eof-object?
 eq?
 equal~?
 eqv?
 exit)

You can look at the code in support/src/org/plt/Kernel.java for
implementations of the primitives we support so far.  Any primitive
you write also needs to be registered in the
IMPLEMENTED-JAVA-KERNEL-SYMBOLS in src/beginner-to-java.ss.


----------------------------------------------------------------------
