Here are the TODOs:


If you wish to take any of these on, please contact us (Danny Yoo
<dyoo@cs.wpi.edu>, Shriram Krishnamurthi <sk@cs.brown.edu>) first to
consult on the design of solutions.

----------------------------------------------------------------------

Implement more of the Beginner Scheme primitives in the runtime.  The
list of primitives comes at the end of this file.

Remove unnecessary classes like Microfloat from Android platform.
Android guarantees a floating-point unit; our current implementation
uses the MicroFloat fixed-point library even though we don't need it.

Expose android-specific functionality.  Definitely talk to us before
tackling this one: we want to make sure the design matches the
functional flafor of the world primitives.

Add web service to access the compiler from network clients.  An
XMLRPC hook to the compiler functions in compile-world.ss is necessary
if we want to provide a network service to folks who don't want to go
through the SDK installation procedure.  Details below.

    * Add DrScheme tool to hook into the web service.  This depends on
      the presence of the web-service.  Once the service is available,
      we'd like a menu option similar to "Create Executable" that
      makes the world compiler available to users.

Fix the graphical deviations in the Android-J2ME bridge classes.

Add unit test cases for the functions in org.plt.Kernel.  Details below.

Fix the deviations listed in DESIGN.

Improve the design of the numeric support.  At the moment, the kernel
code reproduces the behavior of the numeric tower with a bunch of
hardcoded if statements.  This code doesn't feel as robust as it
should be.


----------------------------------------------------------------------


Details on Unit Testing TODO

The unit test cases need work.  The nonexistent tests should be in
src/test/java-src/org/plt/TestKernel.java, exercising code that's in
support/common/src/org/plt/Kernel.java.



----------------------------------------------------------------------

Details on Web Service TODO

For the web service: I just want something network accessible.
Basically, I want to be able to call the generate-j2me-application
function from a network client.

Actually, the signature's going to be slightly different: it should be:

;; make-fresh-j2me-application: string bytes -> bytes
;; Given the name of the application and the bytes 
;; of the beginner-level program, produce the bytes
;; of the jar.

and I'd like this to be network accessible.  A very thin xmlrpc hook would be a simple way to do this.  Then we could add a DrScheme tool to invoke the compiler from a menu option so that we integrate really well into the existing environment as an item just like "Create Executable."  



----------------------------------------------------------------------

Details on Beginner Scheme primitives:


Primitives that need implementation:

(angle
 complex?
 conjugate
 cosh
 current-seconds
 denominator
 even?
 exact->inexact
 exact?
 exp
 expt
 gcd
 imag-part
 inexact->exact
 inexact?
 integer->char
 integer?
 lcm
 log
 magnitude
 make-polar
 negative?
 number?
 numerator
 odd?
 positive?
 quotient
 rational?
 real-part
 real?
 remainder
 round
 sgn
 sinh
 tan
 boolean=?
 boolean?
 false?
 symbol?
 append
 assq
 cons?
 length
 list
 list*
 list-ref
 member
 memq
 memv
 null
 null?
 pair?
 char->integer
 char-alphabetic?
 char-ci<=?
 char-ci<?
 char-ci=?
 char-ci>=?
 char-ci>?
 char-downcase
 char-lower-case?
 char-numeric?
 char-upcase
 char-upper-case?
 char-whitespace?
 char<=?
 char<?
 char=?
 char>=?
 char>?
 char?
 format
 list->string
 make-string
 string
 string->list
 string->number
 string->symbol
 string-append
 string-ci<=?
 string-ci<?
 string-ci=?
 string-ci>=?
 string-ci>?
 string-copy
 string-length
 string-ref
 string<=?
 string<?
 string>=?
 string>?
 string?
 substring
 image=?
 image?
 eof
 eof-object?
 eq?
 equal~?
 eqv?
 exit)


You can look at the code in support/src/org/plt/Kernel.java for
implementations of the primitives we support so far.  Any primitive
you write also needs to be registered in the
IMPLEMENTED-JAVA-KERNEL-SYMBOLS in src/beginner-to-java.ss.


----------------------------------------------------------------------




Private

Handle resolution independence by automatically scaling images to the
size of the device.

Add gui-world primitives to the runtime.
